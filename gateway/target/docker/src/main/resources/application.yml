server:
  port: 80

spring:
  application:
    name: gateway
  cloud:
    gateway:
      globalcors: # 全局的跨域处理
        add-to-simple-url-handler-mapping: true # 解决options请求被拦截问题
        corsConfigurations:
          '[/**]':
            allowedOrigins: # 允许哪些网站的跨域请求
              - "*"
            allowedMethods: # 允许的跨域ajax的请求方式
              - "GET"
              - "POST"
              - "DELETE"
              - "PUT"
              - "OPTIONS"
            allowedHeaders: "*" # 允许在请求中携带的头信息
            allowCredentials: true # 是否允许携带cookie
            maxAge: 360000 # 这次跨域检测的有效期

      discovery:
        locator:
          enabled: true

      routes:
        - id: question_routh   #id随便配置,但最好有特点性
          uri: lb://CONSUMERS #服务器ip前缀,这里可以配置具体地址，但是为了服务的负载均衡配置动态地址，对应Consumer的spring.appliction.name
          predicates:
           - Path=/question/* #服务器下是否存在具体路径,也可以理解为请求的条件

        - id: user_routh   #id随便配置,但最好有特点性
          uri: lb://CONSUMERS #服务器ip前缀,这里可以配置具体地址，但是为了服务的负载均衡配置动态地址，对应Consumer的spring.appliction.name
          predicates:
          - Path=/user/* #服务器下是否存在具体路径,也可以理解为请求的条件

        - id: answers_routh   #id随便配置,但最好有特点性
          uri: lb://CONSUMERS #服务器ip前缀,这里可以配置具体地址，但是为了服务的负载均衡配置动态地址，对应Consumer的spring.appliction.name
          predicates:
          - Path=/answers/* #服务器下是否存在具体路径,也可以理解为请求的条件

        - id: result_routh   #id随便配置,但最好有特点性
          uri: lb://COUNTPROVIDERS #服务器ip前缀,这里可以配置具体地址，但是为了服务的负载均衡配置动态地址，对应Consumer的spring.appliction.name
          predicates:
          - Path=/basic_result/* #服务器下是否存在具体路径,也可以理解为请求的条件

        - id: result_routh   #id随便配置,但最好有特点性
          uri: lb://CONSUMERS #服务器ip前缀,这里可以配置具体地址，但是为了服务的负载均衡配置动态地址，对应Consumer的spring.appliction.name
          predicates:
           - Path=/service_nums/* #服务器下是否存在具体路径,也可以理解为请求的条件
eureka:
  client:
    serviceUrl:
      defaultZone: http://point1:8001/eureka/,http://point2:8002/eureka/
    register-with-eureka: true
    fetch-registry: true